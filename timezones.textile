h1. How Rails Works: Timezones

h2. Introduction

This is the first post in the How Rails Works series and covers how timezones work in a Rails 2.3 application. This guide was written by Ryan Bigg.

h2. Configuration

Timezones depends on the configuration of your applicationm which is set up when you application initializes courtesy of _railties/lib/initializer.rb_ and the +Configuration+ class. This class is defined on "line #649 of _initializer.rb_":http://github.com/rails/rails/blob/2-3-stable/railties/lib/initializer.rb#L649 like this:

<pre type='ruby'>
  class Configuration
</pre>

When you open up the +Rails::Initializer.run+ block in your _config/environment.rb_ the object you're given in the block is a +Configuration+ instance. What's more important in _initializer.rb_ is that inside this +class Configuration+ declaration it defines an +attr_accessor+ for +time_zone+ on "line #827":http://github.com/rails/rails/blob/2-3-stable/railties/lib/initializer.rb#L824-827:


<pre type='ruby'>
# Sets the default time_zone. Setting this will enable time_zone
# awareness for Active Record models and set the Active Record default
# timezone to :utc
attr_accessor :time_zone
</pre>

Pay close attention to this comment for this as it explains if you *do not* set this value your Active Record models will *not be timezone aware*. You've been warned. What this +attr_accessor+ does is set up a setter and a getter for an attribute on the +Configuration+ instance. When Rails initializes it reads this method using the +initialize_time_zone+ called on "line #152 of initializer.rb":http://github.com/rails/rails/blob/2-3-stable/railties/lib/initializer.rb#L152 and defined on "lines #553-570":http://github.com/rails/rails/blob/2-3-stable/railties/lib/initializer.rb#L553-570 as:

<pre type='ruby'>
def initialize_time_zone
  if configuration.time_zone
    zone_default = Time.__send__(:get_zone, configuration.time_zone)

    unless zone_default
      raise \
        'Value assigned to config.time_zone not recognized.' +
        'Run "rake -D time" for a list of tasks for finding appropriate time zone names.'
    end

    Time.zone_default = zone_default

    if configuration.frameworks.include?(:active_record)
      ActiveRecord::Base.time_zone_aware_attributes = true
      ActiveRecord::Base.default_timezone = :utc
    end
  end
end
</pre>

h2. +get_zone+

This checks to see if the +time_zone+ attribute on the +configuration+ object is set and if it is will go through the process of setting up the default timezone. This makes a call to the private method +get_zone+ on +Time+ using +__send__+ because calling +send+ will no longer work on Ruby 1.9 for private methods. +get_zone+ is defined on "lines #55-65 of activesupport/lib/active_support/core_ext/time/zones.rb":http://github.com/rails/rails/blob/4b68debb1c4d3d272b237049c88d01b1eceb58f0/activesupport/lib/active_support/core_ext/time/zones.rb#L55-65:

<pre type='ruby'>
def get_zone(time_zone)
  return time_zone if time_zone.nil? || time_zone.is_a?(TimeZone)
  # lookup timezone based on identifier (unless we've been passed a TZInfo::Timezone)
  unless time_zone.respond_to?(:period_for_local)
    time_zone = TimeZone[time_zone] || TZInfo::Timezone.get(time_zone) rescue nil
  end
  # Return if a TimeZone instance, or wrap in a TimeZone instance if a TZInfo::Timezone
  if time_zone
    time_zone.is_a?(TimeZone) ? time_zone : TimeZone.create(time_zone.name, nil, time_zone)
  end
end
</pre>

If the argument +time_zone+ we've passed is +nil+ or a +TimeZone+ object this method will return the +time_zone+ object. If it is not, it will check to see if it +respond_to?+ +period_for_local+ and if it does not then it will call +TimeZone[time_zone]+ and if that returns nil then +TZInfo::Timezone.get(time_zone)+ is called and then if that fails, it will set +time_zone+ to be nil by the +rescue nil+ at the end.

If +time_zone+ is set by this chain of events, then it will continue on and check if the object +is_a?(TimeZone)+ and just return the object if it is. If it is not, then it will call the +create+ method on the +TimeZone+ class.

h2. +TimeZone#[]+

We'll cover the +[]+ method on TimeZone first. This method can be found on "lines #385-395 of activesupport/lib/active_support/values/time_zone.rb":http://github.com/rails/rails/blob/4b68debb1c4d3d272b237049c88d01b1eceb58f0/activesupport/lib/active_support/values/time_zone.rb#L385-395:

<pre type='ruby'>
def [](arg)
  case arg
    when String
      ZONES_MAP[arg]
    when Numeric, ActiveSupport::Duration
      arg *= 3600 if arg.abs <= 13
      all.find { |z| z.utc_offset == arg.to_i }
    else
      raise ArgumentError, "invalid argument to TimeZone[]: #{arg.inspect}"
  end
end
</pre>

If this method is passed a +String+ it will look up the relevant key in +ZONE_MAPS+ which is defined on "lines #297-357 of activesupport/lib/active_support/values/time_zone.rb":http://github.com/rails/rails/blob/4b68debb1c4d3d272b237049c88d01b1eceb58f0/activesupport/lib/active_support/values/time_zone.rb#L297-357:

<pre type='ruby'>
ZONES = []
ZONES_MAP = {}
[[-39_600, "International Date Line West", "Midway Island", "Samoa" ],
 [-36_000, "Hawaii" ],
 [-32_400, "Alaska" ],
 [-28_800, "Pacific Time (US & Canada)", "Tijuana" ],
 [-25_200, "Mountain Time (US & Canada)", "Chihuahua", "Mazatlan",
           "Arizona" ],
 [-21_600, "Central Time (US & Canada)", "Saskatchewan", "Guadalajara",
           "Mexico City", "Monterrey", "Central America" ],
 [-18_000, "Eastern Time (US & Canada)", "Indiana (East)", "Bogota",
           "Lima", "Quito" ],
 [-16_200, "Caracas" ],
 [-14_400, "Atlantic Time (Canada)", "La Paz", "Santiago" ],
 [-12_600, "Newfoundland" ],
 [-10_800, "Brasilia", "Buenos Aires", "Georgetown", "Greenland" ],
 [ -7_200, "Mid-Atlantic" ],
 [ -3_600, "Azores", "Cape Verde Is." ],
 [      0, "Dublin", "Edinburgh", "Lisbon", "London", "Casablanca",
           "Monrovia", "UTC" ],
 [  3_600, "Belgrade", "Bratislava", "Budapest", "Ljubljana", "Prague",
           "Sarajevo", "Skopje", "Warsaw", "Zagreb", "Brussels",
           "Copenhagen", "Madrid", "Paris", "Amsterdam", "Berlin",
           "Bern", "Rome", "Stockholm", "Vienna",
           "West Central Africa" ],
 [  7_200, "Bucharest", "Cairo", "Helsinki", "Kyev", "Riga", "Sofia",
           "Tallinn", "Vilnius", "Athens", "Istanbul", "Minsk",
           "Jerusalem", "Harare", "Pretoria" ],
 [ 10_800, "Moscow", "St. Petersburg", "Volgograd", "Kuwait", "Riyadh",
           "Nairobi", "Baghdad" ],
 [ 12_600, "Tehran" ],
 [ 14_400, "Abu Dhabi", "Muscat", "Baku", "Tbilisi", "Yerevan" ],
 [ 16_200, "Kabul" ],
 [ 18_000, "Ekaterinburg", "Islamabad", "Karachi", "Tashkent" ],
 [ 19_800, "Chennai", "Kolkata", "Mumbai", "New Delhi", "Sri Jayawardenepura" ],
 [ 20_700, "Kathmandu" ],
 [ 21_600, "Astana", "Dhaka", "Almaty",
           "Novosibirsk" ],
 [ 23_400, "Rangoon" ],
 [ 25_200, "Bangkok", "Hanoi", "Jakarta", "Krasnoyarsk" ],
 [ 28_800, "Beijing", "Chongqing", "Hong Kong", "Urumqi",
           "Kuala Lumpur", "Singapore", "Taipei", "Perth", "Irkutsk",
           "Ulaan Bataar" ],
 [ 32_400, "Seoul", "Osaka", "Sapporo", "Tokyo", "Yakutsk" ],
 [ 34_200, "Darwin", "Adelaide" ],
 [ 36_000, "Canberra", "Melbourne", "Sydney", "Brisbane", "Hobart",
           "Vladivostok", "Guam", "Port Moresby" ],
 [ 39_600, "Magadan", "Solomon Is.", "New Caledonia" ],
 [ 43_200, "Fiji", "Kamchatka", "Marshall Is.", "Auckland",
           "Wellington" ],
 [ 46_800, "Nuku'alofa" ]].
each do |offset, *places|
  places.each do |place|
    place.freeze
    zone = new(place, offset)
    ZONES << zone
    ZONES_MAP[place] = zone
  end
end
ZONES.sort!
ZONES.freeze
ZONES_MAP.freeze
</pre>

This defines the +ZONE_MAPS+ hash with the key being the name of the place and the value being the number of seconds the timezone is offset from UTC. It accomplishes this by going through the array defined with the offset and the related places and calls the +new+ method passing in the +place+ and +offset+ variables to it. The +new+ method is one given to you by Ruby and will create a new +TimeZone+ object and then call the +initialize+ method on it. This +initialize+ method is defined on "lines #180-#184 of activesupport/lib/active_support/values/time_zone.rb":http://github.com/rails/rails/blob/4b68debb1c4d3d272b237049c88d01b1eceb58f0/activesupport/lib/active_support/values/time_zone.rb#L180-184:

<pre type='ruby'>
  def initialize(name, utc_offset, tzinfo = nil)
    @name = name
    @utc_offset = utc_offset
    @tzinfo = tzinfo
  end
</pre>